<?php
	/**
	 * Core file.
	 *
	 * @author Vince Wooll <sales@jomres.net>
	 *
	 * @version Jomres 10.3.1
	 *
	 * @copyright	2005-2022 Vince Wooll
	 * Jomres (tm) PHP, CSS & Javascript files are released under both MIT and GPL2 licenses. This means that you can choose the license that best suits your project, and use it accordingly
	 **/

// ################################################################
	defined('_JOMRES_INITCHECK') or die('');
// ################################################################
	/**
	 *
	 * Todo I will convert this plugin to use DI but for now I want to get the NBE off the ground
	 *
	 * The NBE (New Booking Engine) will use a lot of the existing infrastructure created for the old booking engine because, simply put, it works.
	 *
	 * There's no desire at this stage to fundamentally change any other areas of the system (with the possible exception of adding child prices or other items to individual rooms), the goal of this new functionality is to make the booking engine more manageable and maintainable.
	 *
	 * At this time the dobooking class is 7368 lines, the dobooking functions file is 872 and the handlereq script is 742. The current engine is immense and I'm reluctant to add new functionality or change existing functionality because changing one thing somewhere has the potential to break something somewhere else. It's 15 years old, it's time to retire it and replace it with distinct, unique classes and REST API functionality so that the engine can be called from remote systems not just the Jomres booking forms.
	 *
	 *
	 */
	class new_booking_engine
	{
		public function __construct( $session_id = '' )
		{
			if ($session_id == '') {
				$session_id = generateJomresRandomString(10);
			}

			// The temp booking engine session, which has evolved from being just a storage system to becoming the defacto storage of a visitor's data from start to finish, is pretty aggressive about finding the session id locally, therefore we have to Force the object to re-initialise itself with a new session id
			// NB the sessions table can often have many session ids, some which don't seem to come from the browser's session. In fact they're generated by schedule functionality that asynchonously call Jomres to perform background tasks. They're triggered to be checked to start, but in fact the background tasks create their own sessions. So, if you're looking at the sessions table and wondering where those sessions are coming from, that's them.

			define("FORCE_JOMRES_SESSION" , true );

			$this->property_uid = 0;
			$this->language = "en-GB";
			$this->context = '';
		}

		public function set_language($lang = "")
		{
			$this->language = $lang;

			$jomres_language = new jomres_language();
			$jomres_language->lang = $this->language;
			$jomres_language->get_language();

			$MiniComponents = jomres_singleton_abstract::getInstance('mcHandler');
			$MiniComponents->triggerEvent('00005');
		}

		public function initialise($session_id = '' , $context = "html")
		{
			$this->setup_uses();

			$session_id = filter_var($session_id, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
			$this->session_id = $session_id;

			$this->TempBookingHandler					= new NBE_TempBookingHandler( $session_id );

			if ($this->property_uid == 0 ) {
				$this->property_uid = $this->TempBookingHandler->booking_data->tmpbooking['property_uid'];
			}

			if ($this->property_uid >0) {
				$this->TempBookingHandler->booking_data->tmpbooking['property_uid'] = $this->property_uid;
			}else{
				throw new NBE_BookingEngineException ("Property uid not set for session ".$this->session_id);
			}

			$all_published_properties = get_showtime('published_properties_in_system');
			if (!in_array($this->property_uid , $all_published_properties)) {
				throw new NBE_BookingEngineException ("Property not published or does not exist");
			}

			$this->is_crawler = $this->TempBookingHandler->booking_data->is_crawler;

			$lang			 							= $this->TempBookingHandler->getNBEData('language');
			if ($lang != '') {
				$this->set_language($lang);
			}

			$this->context = $context;

			$current_property_details = jomres_singleton_abstract::getInstance('basic_property_details');
			$current_property_details->gather_data($this->property_uid);

			jr_import('jomres_occupancy_levels');
			$jomres_occupancy_levels = new jomres_occupancy_levels($this->property_uid);
			$this->jomres_occupancy_levels = $jomres_occupancy_levels->occupancy_levels;

			try {
				$this->SiteConfiguration					= new NBE_SiteConfiguration();
				$this->PropertyConfiguration				= new NBE_PropertyConfiguration( $this->property_uid );

				$mrConfig 									= $this->PropertyConfiguration->mrConfig;
				$jrConfig 									= $this->SiteConfiguration->jrConfig;

				$this->booking_model = 'MRP';
				if ($mrConfig[ 'singleRoomProperty' ] =='1') {
					$this->booking_model = 'SRP';
				}

				$this->property_published = 0;
				if ( $current_property_details->published == '1' ) {
					$this->property_published = 1;
				}

				$this->property_name = $current_property_details->get_property_name($this->property_uid );
				$this->confirmation_url = JOMRES_SITEPAGE_URL_NOSEF.'&task=confirmbooking&selectedProperty='.$this->property_uid;
				$this->property_details_url = get_property_details_url($this->property_uid , 'nosef');


				$this->NBE_User								= new NBE_User();
				$this->prices_shown_are_nett_price			= false;

				$thisJRUser									= $this->NBE_User->get_user();

				$this->PropertyItemsRoomTypes				= new NBE_PropertyItemsRoomTypes( $this->property_uid );
				$this->ChildRates							= new NBE_PropertyChildRates( $this->property_uid );
				$this->PropertyItemsRooms					= new NBE_PropertyItemsRooms( $this->property_uid );
				$this->PropertyItemsTaxRates				= new NBE_PropertyItemsTaxRates( $mrConfig  );

				$this->PropertyItemsRoomFeatures			= new NBE_PropertyItemsRoomFeatures( $this->property_uid );
				$this->PropertyItemsTariffTypes				= new NBE_PropertyItemsTariffTypes( $this->property_uid , $mrConfig );
				$this->PropertyItemsTariffs					= new NBE_PropertyItemsTariffs( $this->property_uid , $this->PropertyItemsTaxRates->accommodation_tax_rate , $mrConfig , $this->PropertyItemsTariffTypes);
				$this->NBE_PropertyItemsImages				= new NBE_PropertyItemsImages( $this->property_uid );

				$this->PropertyItemsExtras					= new NBE_PropertyItemsExtras( $this->property_uid ,$this->PropertyItemsTaxRates->taxrates , $mrConfig );
				$this->PropertyItemsThirdPartyExtras		= new NBE_PropertyItemsThirdPartyExtras( $this->property_uid );


				// Finds dates that the property will allow bookings for.
				$this->NBE_PropertyStatesDatesWithinBookingSettingParameters		= new NBE_PropertyStatesDatesWithinBookingSettingParameters( $mrConfig );

				// mainly for informational use by other systems/REST API.
				$this->PropertyItemsBookings				= new NBE_PropertyItemsBookings( $this->property_uid ,$this->PropertyItemsRooms->allPropertyRooms , $this->TempBookingHandler , $mrConfig  , $this->NBE_PropertyStatesDatesWithinBookingSettingParameters->datesWithinBookingSettingParameters );

				$this->PropertyStatesFullyBookedDates		= new NBE_PropertyStatesFullyBookedDates( $this->property_uid ,$this->PropertyItemsBookings->allBookings , $this->PropertyItemsRooms->allPropertyRooms , $this->PropertyItemsTariffs->allPropertyTariffs , $this->NBE_PropertyStatesDatesWithinBookingSettingParameters );


				$this->NBE_FilterTariffsRemoveDatesOutsideMinDaysSelectedAndAdvanceBookingLimit	= new NBE_FilterTariffsRemoveDatesOutsideMinDaysSelectedAndAdvanceBookingLimit( $this->PropertyItemsTariffs->allPropertyTariffSets , $this->NBE_PropertyStatesDatesWithinBookingSettingParameters->datesWithinBookingSettingParameters );

				$this->NBE_FilterTariffsRemoveFullyOccupiedDates	= new NBE_FilterTariffsRemoveFullyOccupiedDates(
					$this->PropertyStatesFullyBookedDates->fully_booked_dates ,
					$this->NBE_FilterTariffsRemoveDatesOutsideMinDaysSelectedAndAdvanceBookingLimit->filteredTariffSets );

				$this->NBE_FilterTariffsOrganiseByRoomType	= new NBE_FilterTariffsOrganiseByRoomType( $this->PropertyItemsRoomTypes->allRoomClasses ,$this->NBE_FilterTariffsRemoveFullyOccupiedDates->filteredTariffSets , $this->PropertyItemsRooms->allPropertyRooms  );


				$this->PropertyItemsOutputStrings			= new NBE_PropertyItemsOutputStrings( $jrConfig , $mrConfig , $thisJRUser , $this->PropertyItemsTaxRates->accommodation_tax_rate );
				$this->make_required_fields($mrConfig);


				// Now that filtering has been done, we can re-parse the NBE_FilterTariffsRemoveFullyOccupiedDates filteredTariffSets array to find the true available dates
				$this->available_dates = array();
				foreach ( $this->NBE_FilterTariffsRemoveFullyOccupiedDates->filteredTariffSets as $tariff_set) {
					foreach ($tariff_set['dates'] as $key=>$val) {
						if (!in_array($key,$this->available_dates)) {
							$this->available_dates[] = $key;
						}
					}
				}

				$fbd1 = $this->NBE_PropertyStatesDatesWithinBookingSettingParameters->dates_from_today_til_first_valid_date;
				$fbd2 = $this->PropertyStatesFullyBookedDates->fully_booked_dates;

				if (!empty($fbd1) && !empty($fbd2)) {
					$this->not_available_dates = array_unique(array_merge($fbd1,$fbd2));
				} else {
					$this->not_available_dates = array_unique($fbd2);
				}

				//  we will create a new array "allowed dates" which will be a mixture of the existing available_dates, and then the first date of date blocks so that, for example, a booking that has a booking for the 15th of June, still allows the calendar to select the 14th and 15th
				$dateBlocks = array();
				$index = -1;
				$last = 0;
				asort($this->not_available_dates);

				foreach ($this->not_available_dates as $date) {
					$ts = strtotime($date);
					if (false !== $ts) {
						$diff = $ts - $last;

						if ($diff > 86400) {
							$index = $index + 1;
							$dateBlocks[$index][] = $date;
						} elseif ($diff > 0) {
							$dateBlocks[$index][] = $date;
						} else {
							// Error! dates are not in order from small to large
						}
						$last = $ts;
					}
				}

				$changeover_days = array();
				if (!empty($dateBlocks) ) {
					foreach ($dateBlocks as $dateBlock) {
						$changeover_days[] = $dateBlock[0];
					}
				}

				$this->allowed_dates = $this->available_dates;
				// The current booking form calendar doesn't allow us to select Day X if the night of that day has been booked out, so here we will identify all dates that are parts of blocks, and allow the FIRST day from those blocks
				if (!empty($this->not_available_dates)  ){
					foreach ($this->not_available_dates as $key=>$val) {
						if ( in_array($val,$changeover_days)) {
								$this->allowed_dates[] = $val;
						}
					}
					asort($this->allowed_dates);
				}


				$this->currencycode = $mrConfig[ 'property_currencycode' ];
				if ($jrConfig[ 'useGlobalCurrency' ] == '1') {
					$this->currencycode = $jrConfig[ 'globalCurrencyCode' ];
				}

				jr_import('jomres_child_rates');
				$jomres_child_rates = new jomres_child_rates( $this->property_uid );
				$this->child_rates = $jomres_child_rates->child_rates;

				$this->min_days = $this->PropertyItemsTariffs->minest_days;

				$this->fixedPeriodBookings = 0;
				$this->fixedPeriodBookingsNumberOfDays = 0;
				if ($mrConfig[ 'fixedPeriodBookings' ] == '1' ) {
					$this->fixedPeriodBookings = 1;
					$this->fixedPeriodBookingsNumberOfDays = $mrConfig[ 'fixedPeriodBookingsNumberOfDays' ];
				}

				$this->fixedArrivalDateYesNo = 0;
				$this->fixedArrivalDay = 7; // In JS days of the week are 0-6 so might as well choose 7 for any day
				if ($mrConfig[ 'fixedArrivalDateYesNo' ] == '1' ) {
					$this->fixedArrivalDateYesNo = 1;
					$this->fixedArrivalDay = $mrConfig[ 'fixedArrivalDay' ];
				}

				// Gives scope for future changes
				$this->AdultsRequiredInBooking = true;
				$this->ChildrenRequiredInBooking = false;

				$this->bypass_confirmation = true;
				jr_import("gateway_plugin_settings");
				$plugin_settings = new gateway_plugin_settings();
				$plugin_settings->get_settings_for_property_uid( $this->property_uid );
				foreach ($plugin_settings->gateway_settings as $gateway) {
					if ( isset($gateway["active"]) && $gateway["active"] =='1') {
						$this->bypass_confirmation = false;
					}
				}
			}
			catch (NBE_BookingEngineException $e) {
				// $this->context
				var_dump($e);
				exit;
			}

		}

		public function save_session()
		{
			return $this->TempBookingHandler->booking_data->saveBookingData();
		}

		private function make_required_fields($mrConfig)
		{
			$this->address_form_fields = array (
				[
					'field' => 'firstname' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_ARRIVALFIRSTNAME_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_name'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_FIRSTNAME']
				],
				[
					'field' => 'surname' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_ARRIVALSURNAME_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_surname'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_SURNAME']
				],
				[
					'field' => 'house' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_GUEST_JOMRES_HOUSE_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_houseno'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_HOUSENO']
				],
				[
					'field' => 'street' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_GUEST_JOMRES_STREET_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_street'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_STREET']
				],
				[
					'field' => 'town' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_GUEST_JOMRES_TOWN_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_town'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_TOWN']
				],
				[
					'field' => 'postcode' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_GUEST_JOMRES_POSTCODE_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_postcode'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_POSTCODE']
				],
				[
					'field' => 'tel_mobile' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_GUEST_JOMRES_MOBILE_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_mobile'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_CELLPHONE']
				],
				[
					'field' => 'email' ,
					'label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_COM_MR_EB_GUEST_JOMRES_EMAIL_EXPL'],
					'required' => (bool)$mrConfig['bookingform_requiredfields_email'] ,
					'required_label' => $this->PropertyItemsOutputStrings->output_strings['_JOMRES_BOOKINGFORM_MONITORING_REQUIRED_EMAIL']
				],
			);
		}

		// After fighting with autoloading for far too long, settled instead on writing basic classes.
		// Later I'll convert this to something a bit more grown up
		private function setup_uses()
		{
			jr_import('NBE_Utilities');

			jr_import('NBE_SiteConfiguration');
			jr_import('NBE_PropertyConfiguration');
			jr_import('NBE_PropertyChildRates');

			jr_import('NBE_User');
			jr_import('NBE_TempBookingHandler');
			jr_import('NBE_PropertyItemsRoomTypes');
			jr_import('NBE_PropertyItemsRooms');
			jr_import('NBE_PropertyItemsTaxRates');
			jr_import('NBE_PropertyItemsOutputStrings');
			jr_import('NBE_PropertyItemsRoomFeatures');
			jr_import('NBE_PropertyItemsTariffTypes');
			jr_import('NBE_PropertyItemsTariffs');
			jr_import('NBE_PropertyItemsImages');
			jr_import('NBE_PropertyItemsThirdPartyExtras');
			jr_import('NBE_PropertyStatesFullyBookedDates');
			jr_import('NBE_PropertyStatesDatesWithinBookingSettingParameters');
			jr_import('NBE_PropertyItemsExtras');
			jr_import('NBE_PropertyItemsBookings');


			jr_import('NBE_FilterTariffsRemoveDatesOutsideMinDaysSelectedAndAdvanceBookingLimit');
			jr_import('NBE_FilterTariffsRemoveFullyOccupiedDates');
			jr_import('NBE_FilterTariffsOrganiseByRoomType');
		}
	}


